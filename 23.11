Время 

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;



namespace FructionApp
{
    public class Time
    {
        public int hour;
        public int minute;
        public int second;
        public Time(int h, int m, int s)
        {
            hour = h;
            minute = m;
            second = s;
        }



        public Time(int h) : this(h, 1,1)
        {
            //h = n;
            //m = 1;
            //s = 1;
        }
        public Time() : this(0, 0, 1)
        {
            //h = 0;
            //m = 0;
            //s = 1;
        }
        



        
        
        
        public void Print()
        {
            {
                if (minute < 10)
                    if (second < 10)
                        Console.WriteLine( $"{hour}:0{minute}:0{second}");
                    else
                        Console.WriteLine($"{hour}:0{minute}:{second}");
                else
                {
                    if (second < 10)
                        Console.WriteLine($"{hour}:{minute}:0{second}");
                    else
                        Console.WriteLine($"{hour}:{minute}:{second}");
                }
            }
        }
        public override string ToString()
        {
            if (Second >= 0)
                return $"{Hour}:{Minute}:{Second}";
            return $"{Hour}:{Minute}:{second}";
        }



        public int Hour
        {
            get
            {
                return hour;
            }
            set
            {
                if ( value > 24)
                {
                    throw new ArgumentException("Перешли за сутки!");



                }
                if (value < 0)
                {
                    throw new ArgumentException("Время не может быть отрицательным");



                }



            }
        }



        public int Minute
        {
            get
            {
                return minute;
            }
            set
            {
                if (value >= 60)
                {
                    throw new ArgumentException("Нельзя так делать");
                }
                if(value < 0)
                {
                    throw new ArgumentException("Время не может быть отрицательным");



                }
            }
        }
        public int Second
        {
            get
            {
                return second;
            }
            set
            {
                if (value >= 60)
                {
                    throw new ArgumentException("Нельзя так делать");
                }
                if (value < 0)
                {
                    throw new ArgumentException("Время не может быть отрицательным");



                }
            }
        }



        
        public static Time operator +(Time a, Time b)
        {            
            var n = a.hour + b.hour;
            var d = a.minute + b.minute;
            var q = a.second + b.second;



            while (q >= 60 || d >= 60)
            {
                if (q >= 60)
                {
                    q = q - 60;
                    d++;
                }



                if (d >= 60)
                {
                    n++;
                    d = d - 60;
                }
            }
            if (n >= 24)
            {
                return new Time(0,0,0);
            }
              
            return new Time(n,d,q);
        }
        public static Time operator -(Time a, Time b)
        {
            var n = a.hour - b.hour;
            var d = a.minute - b.minute; 
            var q = a.second - b.second;
            while(d < 0 || q < 0)
            {
                if (q < 0)
                {
                    q = q + 60;
                    d--;
                }
                if(d < 0)
                {
                    d = d + 60;
                    n--;    
                }



            }
            if (n < 0)
                return new Time(0,0,0);
            return new Time(n, d, q);
        }
        public static Time operator *(Time a, int t)
        {
            var n = a.hour * t;
            var d = a.minute * t;
            var q = a.second * t;
            while (q >= 60 || d >= 60)
            {
                if (q >= 60)
                {
                    q = q - 60;
                    d++;
                }



                if (d >= 60)
                {
                    n++;
                    d = d - 60;
                }
            }
            if (n >= 24)
            {
                return new Time(0, 0, 0);
            }
            return new Time(n, d, q);




        }
        
        public static Time operator /(Time a, int t)
        {
            var u = (a.hour * 3600 + a.minute * 60 + a.second) / t;
            int mi = u / 60;
            int q = u - mi * 60;
            int n = mi / 60;
            int d = mi - n * 60;
            if (n < 0)
                return new Time(0, 0, 0);
            return new Time(n, d, q);
        }



        public void InSecond(Time a)
        {
            var t = a.hour * 60 * 60 + a.minute * 60 + a.second;
            Console.WriteLine(t);
        }



    }
}
